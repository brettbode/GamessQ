/*
 * Copyright (C) 2008 Iowa State University 
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _GAMESSQ_FRAME_H_
#define _GAMESSQ_FRAME_H_

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma interface "gamessq_frame.h"
#endif

/*!
 * Includes
 */

////@begin includes
#include "wx/frame.h"
#include "wx/toolbar.h"
#include "wx/listctrl.h"
#include "wx/statusbr.h"
////@end includes

#include <wx/config.h>
#include <wx/dnd.h>
#include <wx/timer.h>
#include "confirm_overwrite.h"
#include "configuration_dialog.h"
#include "job_options_dialog.h"
#include "job_queue_manager.h"
#include "job.h"

/*!
 * Forward declarations
 */

////@begin forward declarations
class wxMenu;
class wxListCtrl;
////@end forward declarations

/*!
 * Control identifiers
 */

////@begin control identifiers
#define ID_GAMESSQFRAME 10000
#define ID_PAUSEALL 10019
#define ID_PAUSE 10005
#define ID_RESUME 10006
#define ID_SAVEFOLDER 10020
#define ID_SAVEAS 10021
#define ID_MACMOLPLT 10010
#define ID_VIEWLOGS 10009
#define ID_REFRESH 10011
#define ID_TOOLBAR1 10002
#define ID_JOBLISTCTRL 10003
#define ID_STATUSBAR1 10008
#define SYMBOL_GAMESSQFRAME_STYLE wxCAPTION|wxRESIZE_BORDER|wxSYSTEM_MENU|wxMINIMIZE_BOX|wxMAXIMIZE_BOX|wxCLOSE_BOX|wxTAB_TRAVERSAL
#define SYMBOL_GAMESSQFRAME_TITLE _("GamessQ")
#define SYMBOL_GAMESSQFRAME_IDNAME ID_GAMESSQFRAME
#define SYMBOL_GAMESSQFRAME_SIZE wxSize(600, 400)
#define SYMBOL_GAMESSQFRAME_POSITION wxDefaultPosition
////@end control identifiers
#define ID_TIMER 20002


//! GamessQ main window
/*!
 * This class provides the main window for GamessQ
 *
 * \note Most of the code is generated by DialogBlocks, so it may not be very
 * readable.
 */
class GamessQFrame: public wxFrame
{    
    DECLARE_CLASS( GamessQFrame )
    DECLARE_EVENT_TABLE()

public:
    /// Constructors
    GamessQFrame();
    GamessQFrame( wxWindow* parent, wxWindowID id = SYMBOL_GAMESSQFRAME_IDNAME, const wxString& caption = SYMBOL_GAMESSQFRAME_TITLE, const wxPoint& pos = SYMBOL_GAMESSQFRAME_POSITION, const wxSize& size = SYMBOL_GAMESSQFRAME_SIZE, long style = SYMBOL_GAMESSQFRAME_STYLE );

    bool Create( wxWindow* parent, wxWindowID id = SYMBOL_GAMESSQFRAME_IDNAME, const wxString& caption = SYMBOL_GAMESSQFRAME_TITLE, const wxPoint& pos = SYMBOL_GAMESSQFRAME_POSITION, const wxSize& size = SYMBOL_GAMESSQFRAME_SIZE, long style = SYMBOL_GAMESSQFRAME_STYLE );

    /// Destructor
    ~GamessQFrame();

    /// Initialises member variables
    void Init();

    /// Creates the controls and sizers
    void CreateControls();

////@begin GamessQFrame event handler declarations

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_PREFERENCES
    void OnSETUPClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_PAUSEALL
    void OnPauseallClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_EXIT
    void OnEXITClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_ADD
    void OnADDClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_REMOVE
    void OnRemoveClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_CANCEL
    void OnCancelClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_PAUSE
    void OnPauseClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_RESUME
    void OnResumeClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_SAVEFOLDER
    void OnSavefolderClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_SAVEAS
    void OnSaveasClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_MACMOLPLT
    void OnMacmolpltClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEWLOGS
    void OnViewlogsClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_REFRESH
    void OnRefreshClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_CLEAR
    void OnClearClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_ABOUT
    void OnAboutClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_LIST_ITEM_SELECTED event handler for ID_JOBLISTCTRL
    void OnJoblistctrlSelected( wxListEvent& event );

    /// wxEVT_COMMAND_LIST_ITEM_DESELECTED event handler for ID_JOBLISTCTRL
    void OnJoblistctrlDeselected( wxListEvent& event );

    /// wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT event handler for ID_JOBLISTCTRL
    void OnJoblistctrlBeginLabelEdit( wxListEvent& event );

    /// wxEVT_COMMAND_LIST_END_LABEL_EDIT event handler for ID_JOBLISTCTRL
    void OnJoblistctrlEndLabelEdit( wxListEvent& event );

    /// wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK event handler for ID_JOBLISTCTRL
    void OnJoblistctrlRightClick( wxListEvent& event );

////@end GamessQFrame event handler declarations

////@begin GamessQFrame member function declarations

    int GetRefreshFrequency() const { return mRefreshFrequency ; }
    void SetRefreshFrequency(int value) { mRefreshFrequency = value ; }

    wxTimer* GetRefreshTimer() const { return mRefreshTimer ; }
    void SetRefreshTimer(wxTimer* value) { mRefreshTimer = value ; }

    JobQueueManager GetMQueueManager() const { return mQueueManager ; }
    void SetMQueueManager(JobQueueManager value) { mQueueManager = value ; }

    JobList GetMJobList() const { return mJobList ; }
    void SetMJobList(JobList value) { mJobList = value ; }

    ConfigurationDialog* GetConfigDialog() const { return mConfigDialog ; }
    void SetConfigDialog(ConfigurationDialog* value) { mConfigDialog = value ; }

    JobOptionsDialog* GetMJobOptionsDialog() const { return mJobOptionsDialog ; }
    void SetMJobOptionsDialog(JobOptionsDialog* value) { mJobOptionsDialog = value ; }

    wxConfig* GetMConfig() const { return mConfig ; }
    void SetMConfig(wxConfig* value) { mConfig = value ; }

    wxMenu* GetMRightClickMeny() const { return mRightClickMenu ; }
    void SetMRightClickMeny(wxMenu* value) { mRightClickMenu = value ; }

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end GamessQFrame member function declarations

    /// Should we show tooltips?
    static bool ShowToolTips();

////@begin GamessQFrame member variables
    wxMenu* AppMenu;
    wxMenu* jobsMenu;
    wxToolBar* jobsToolbar;
    wxListCtrl* jobListCtrl;
    JobList mJobList;
    ConfigurationDialog* mConfigDialog;
    JobOptionsDialog* mJobOptionsDialog;
    wxConfig* mConfig;
    wxMenu* mRightClickMenu;
private:
    int mRefreshFrequency; // specified in milliseconds
    wxTimer* mRefreshTimer;
    JobQueueManager mQueueManager;
////@end GamessQFrame member variables

public:
	//! Handle dropped files
	bool OnDropFiles(const wxArrayString& filenames);
private:
	//! File drop target
	/*!
	 * This class provides a drop target to allow drag and drop into the main
	 * window under Linux and Windows.
	 */
	class DropTarget: public wxFileDropTarget
	{
	public:
		//! Constructor
		DropTarget(GamessQFrame *parent);
	
		//! Called when files get dropped into the window
		bool OnDropFiles(wxCoord x, wxCoord y, const wxArrayString& filenames);
	
	private:
		//! The main window
		GamessQFrame *mParent;
	};

	//! True if backend is active
	bool mActive;

	//! True if currently connected to the backend
	bool mConnected;

	//! Can jobs be removed from the queue?
	bool CanRemove();

	//! Can selected job be canceled?
	bool CanCancel(int *status);

	//! Can selected job be paused?
	bool CanPause(int *status);

	//! Can selected job be resumed?
	bool CanResume(int *status);

	//! Can selected job have the logs viewed?
	bool CanViewLogs(int *status);

	//! Can selected job be saved to a folder?
	bool CanSaveFolder(int *status);

	//! Can selected job be saved to a file?
	bool CanSaveAs(int *status);

	//! Can the given job be canceled?
	bool CanCancel(Job *job);

	//! Can the given job be Paused?
	bool CanPause(Job *job);

	//! Can the given job be Paused?
	bool CanResume(Job *job);

	//! Can the given job have the log viewed?
	bool CanViewLogs(Job *job);

	//! Can the given job be saved to a Folder?
	bool CanSaveFolder(Job *job);

	//! Gets the status array for the currently selected items
	int *GetSelectedStatus();

	//! Refreshes the Buttons
	void RefreshButtons();

	//! Greys out all the buttons
	void GreyButtons();

	//! Refresh the job list
	void RefreshList();

	//! Adds a job to the queue
	void NewJob();

	//! Refresh timer event handler
	void OnTimer(wxTimerEvent& event);

	//! Configuration dialog ok event handler
	void OnSETUPOk(wxCommandEvent& event);

	//! Finds which files will be overwritten
	void FindOverwrites(wxArrayString &overwrites, int jobId,
			wxString savename);
};

#endif
    // _GAMESSQ_FRAME_H_
